Dokumentation Betriebssysteme Labor – Gruppe dosa1013, depa1016, odda1011

1. Aufgabenstellung und Vorgaben

1.1 Aufgabenstellung
Die uns gestellte Aufgabe in diesem Labor bestand darin, ein Dateisystem zu erstellen. Dieses sollte verwendet werden um einen Dateiträger zu formatieren und somit Dateien mit den gewöhnlichen Attributen zu unterstützen. Diese Attribute umschließen zum Beispiel den Namen, die Größe, die Zugriffsrechte und die verschiedenen Zeitstempel der Dateien.
Weiterhin sollte ermöglicht werden, dass ein Datenträger, der mit dem Dateisystem formatiert wurde, in einem Verzeichnisbaum eingetragen wird. Die Einbindung sollte in einem freien, wählbarem und leerem Verzeichnis geschehen, in welchem der Inhalt des Datenträgers anschließend erscheinen sollte.

Anstatt wie bei traditionellen Dateisystemen mit Daten auf einem Datenträger zu arbeiten, verwendeten wir, wie vorgegeben, FUSE. FUSE, was für “File System In User Space” steht, hilft einem dabei, wie der Name schon sagt, Dateisysteme zu schreiben ohne dabei auf Kernel Ebene arbeiten zu müssen und wird dementsprechend vor allem bei virtuellen Filesystemen verwendet.

Während bei traditionellen Dateisystemen mit Kernel-Programmierung Anfragen aus dem User Space den VFS (Virtual Filesystem Switch) durchlaufen müssen, gefolgt vom Block-Layer, dem Input-Output-Layer, dem Gerätetreiber bis schließlich der Datenträger erreicht wird, wird das bei FUSE Filesystemen vermieden.

Stattdessen werden Anfragen aus dem User Space vom VFS direkt an FUSE weitergegeben, welches sich um die betroffenen Bereiche kümmert. FUSE führt anschließend ein Programm aus, gibt diesem die Anfragen weiter und erhält eine Antwort, die es zum anfragenden Programm weiterleitet. Wodurch das virtuelle Dateisystem sich praktisch ebenfalls im User Space befindet.


Um diesen Workaround zu ermöglichen, mussten für die Verwendung von FUSE entsprechende Operationen implementiert werden. 

Im ersten Aufgabenteil war das Ziel mittels dem Kommando “mkfs.myfs” einen Datenträger zu erstellen und alle zugehörigen nötigen Strukturen.
Beim Erstellen sollten zuvor ausgewählte Files einmalig auf den Datenträger kopiert werden. Nachdem durch FUSE der Datenträger in den Verzeichnisbaum eingebunden wurde, sollte es möglich sein Dateien lesen zu können, aber noch nicht das Bearbeiten oder Löschen.
Beim oben beschriebenen Aufgabenteil war vor allem das Design des Dateisystems entscheidend was den Aufbau und die Einteilung verschiedener Elemente angeht.
Anschließend ging es ans Erstellen und Befüllen des Datenträgers durch das Kommando “mkfs.myfs”. Das Einbinden erfolgte über das Kommando “mount.myfs”. Schlussendlich deckten wir mögliche Fehlerquellen mit ausführlichen Testfällen ab.

Das Ziel des zweiten Aufgabenteils war es, ähnlich wie im ersten Aufgabenteil, einen leeren Datenträger mit fester Größer zu erstellen. Nach dem Einbdinden des Datenträgers im Verzeichnisbaum durch FUSE, sollten diesmal Daten jedoch bearbeitet und gelöscht werden können. Hierfür mussten zusätzlich die FUSE-Operationen zum Anlegen, Ändern, Schreiben und Löschen von Dateien implementiert werden.

Außerdem war es eventuell nötig den Aufbau der MyFS-Containerdateien anzupassen(?)

Der dritte und letzte Teil der Laborabgabe ist das Anfertigen der Dokumentation, über den von uns verfassten Code.




1.2 Vorgaben
Das zu erstellende Dateisystem sollte eine Größe von mindestens 30MB freien Platz für Dateien anbieten. Dementsprechend war die Größe aller Verwaltungsstrukturen zu beachten um sicherzugehen, dass genug Platz für Dateien übrig bleibt.

Als Konstanten wurde zuerst die maximal Länge eines Dateinamens “NAME_LENGTH” auf 255 Charaktere festgelegt. 
Die logische Blockgröße “BLOCK_SIZE” sollte 512 sein, die maximale Anzahl an Verzeichniseinträgen “NUM_DIR_ENTRIES” sollte 64 sein und die Anzahl offener Dateien pro einer MyFS Containerdatei sollte auch 64 sein.

Weiterhin waren über ILIAS
